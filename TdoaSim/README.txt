This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
https://creativecommons.org/licenses/by-nc-sa/4.0/

Primary Author: Anthony Iannuzzi, awi7573@rit.edu

Directories:
See the README within a directory for more details.
CNN                            -- Experimental machine learning application, not implemented in LASSO
Deprecated                     -- Essentially a dump of old files.
GroundTracks                   -- Directory of example ground tracks from Orekit.
LocateSat                      -- All homemade scripts for TDoA.
MonteCarloResults              -- .mat files saved from MonteCarlo runs.
Plots                          -- All saved plots related to LASSO TDoA.
Presentation and Documentation -- Flochart and 100+ slide presentation on the Program as a whole.
SensitivityResults             -- .mat files saved from One-at-a-time runs
TestScripts                    -- unit and integration tests
TimeDiff                       -- Homemade data structures and Time difference calculation scripts.

Scripts:


GraphSaver -- used all over the project. Saves all plots open in Matlab. This is an extremely 
	      powerful function. Please cite Anthony Iannuzzi if you use it anywhere.

OutputTriangleParameters -- Run this script to see how well conditioned a triangle of stations is.





-----------TCP------------------
The Server class in Java acts as a "test harnass" that sends TDoA TCP inputs. This is how the main
C++ code will interact with TDoA. See the user manual on how to run a test with this. 
Server.class -- Editable file. Use to see the format of the TCP server.
Server.java -- compiled file Run with Java Server in the cmd window in this directory.
TDoAwithTCPin.m -- Program that reads a TCP socket. Usually generated from the Server.java.
ExampleTCPoutput.txt -- Example output generated by running TDoAwithTCPin 'ExampleTCPoutput'
---------------------------------

-------Range Approximation-------
FitRangePolynomial -- uses an empirical model to estimate the range of a satellite, used for
		      the sensitivityAnalysisNet.m
RangePolynomial.mat -- Saved polynomial parameters. Loaded through RangeApproximate.
RangeApproximate -- applys the empirical model to find the range given a satellite's altitude and its
		    elevation wrt to the reference frame.
RangeApproximationVals.xlsx -- dataset for range fitting.
---------------------------------

-----Standalone Simulations------
SentinelSat -- simple TDoA simulation with stations around RIT and satellite in single location.


---------------------------------



--------------Utils--------------
readGroundTrack -- Read a ground track produced by Orekit XXXXXXXXX.class in StandAlone simulations
		-- TODO update to new Orekit format?

timeDiff3toMatrix -- used specifically for 3 stations and 1 satellite position. It converts the
		     timediff structure array to an array shaped for TDoA input.
---------------------------------


Unknown Status:



GPSmeans.mat -- where does this belong?

GroundTrackNear90.m -- one-at-a-time needs updating
MonteCarlo.m -- needs commenting

OneAtaTime.m -- need to check
OneAtaTime3.m -- need to check
OneAtaTime4.m -- needs updating. 4+ station TDoA??????????

TDoAexploration.m -- needs updating with MonteCarlo
TDoAwithErrorEstimationComparison.m -- needs commenting. Rectify absolute vs. relative?

plotHistograms.m -- needs comments
plotMonteCarlo.m -- needs comments
plotSensivity.m -- need comments

sensitivityAnalysisNet.m -- needs comments. 











This folder contains a program to run a 3 station TDoA simulation, which will be used to easily see the effects that different parameters (e.g., ground station location, ground station location error, clock synchronization error, satellite position) will have on our TDoA calculations. We will use a spherical earth for the calculations.

We currently have three programs.

1. Main (TopLevel)

2. Calculate Time Difference (TimeDiff)
Calculate the time difference of satellite signal arrival among stations, and iits associated error.
Inputs: Station locations (lat, long)
	Clock sync error
	Alignment error
	Ground position of each station
	Satellite position
	Absolute time of when signal was transmitted
Outputs: Time differences among stations and center of the earth
	 Absolute time of signal arrival at center of the earth?
	 Error of time difference among stations

3. Determine Satellite Location (LocateSat)
This will use the output of Program 2 to determine the satellite's location and its error.
Inputs: The ouputs of Calculate Time Difference
Outputs: Satellite location at the time it transmitted
	 Error of satellite location calculation

Important Notes:
11/12 Its very important which zPlanes we pick. Low zPlanes introduce error for high elevation cases. 0.007 deg -> 0.09 deg
High zPlanes introduce significant error for low elevation cases. 0.32 deg -> 1.8 deg
11/12 It appears as the planes approach infinity, we get better results.

11/13 The intersection of 2 hyperboloids is a hyperbola. If we can find the equation of that hyperbola, we can approximate the line with the hyperbola's asympotote.
Okay. Well fitting a hyperbola to a cloud of points is difficult because it requires a parametric variable, t, which is unknown before solving for the hyperbola.

Choices moving forward:
1) figure out how to vary the parametric value variables as well so the parametric fit converges
2) Consider intersecting 2 Hyperboloids together. The result should be 4 solutions, each a quarter of a hyperbola. If we can translate the symbolic toolbox
output to a hyperbola of the form x^2/a+y^2/b we can get the asymptote line. 

Upcoming Features:
11/11 Add time difference error functionality to one-sided vs. two-sided Hyperbola. If the time difference could be negative, plot the mirror image of that specific hyperbola.
11/11 Decide how to bound the solution. Currently take the 3 closest points -- most of the time. Doesn't always work. 
Test case:
TDoA2Dtest last test commented out TimeDiffs. 

NOTE: Running TDoAwithErrorEstimationTest with a low elevation will result in a test failure
as the estimated error will likely be very off from the absolute error due to a non-normal output
distribution. 

Server.class and Server.java are used for TDoA with TCP. See the users guide on how to simulate
TDoA operation with a TCP connection. 

