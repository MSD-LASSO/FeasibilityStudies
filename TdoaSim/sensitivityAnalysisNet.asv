%This script will evaluate sensitivity over a dynamics range.
clearvars
close all

h1=gcp;
% h1=parpool;

addpath('LocateSat')
addpath('TimeDiff')

R1=[43.209037000000000	-77.950921000000010	175.000000000000000]; %brockport
R2=[42.700192000000000	-77.408628000000010	701.000000000000000]; %mees
R3=[43.204291000000000	-77.469981000000000	147.000000000000000]; %webster
R4=[42.871390000000000	-78.018577000000000	323.000000000000000]; %pavilion
R5=[43.0853460000000 -77.6791050000000 170+4*4]; %Institute Hall
R6=[43.0483000000000 -77.6586630000000 176+5*4]; %RIT inn
R7=[43.0862850000000 -77.6680150000000 163.4+12*4]; %ellingson
R8=[43.213809 -77.190456 140+2*4]; %williamson high school
R9=[43.0162 -78.1380 272+3*4]; %GCC library


T=[R2;R1;R3]; OutputFolder='MeesBrockportWebster';
T=[R2;R3;R4]; OutputFolder='MeesWebsterPavilion';
T=[R6;R5;R7]; OutputFolder='InnInstituteEllingson';
T=[R2;R4;R6]; OutputFolder='MeesPavilionInn';
T=[R6;R1;R3]; OutputFolder='InnBrockportWebster';
T=[R2;R8;R1]; OutputFolder='MeesWilliamsonBrockport';
T=[R6;R9;R1]; OutputFolder='InnGCCBrockport';
T=[R2;R9;R8]; OutputFolder='MeesGCCWilliamson';
T=[R2;R3;R9]; OutputFolder='MeesWebsterGCC';
T=[R2;R6;R8]; OutputFolder='MeesInnWilliamson';


TimeSyncErrFar=100e-9; %100ns time sync error.
RL_err=ones(3,3)*9; %9m location error.

%% Invariants
ClkError=ones(3,1)*TimeSyncErrFar; %3x1
Sphere=wgs84Ellipsoid;
numSamples=1;
DebugMode=-1;

ReceiverError=[zeros(3,3) ClkError];
GND=getStruct(T,ReceiverError,T(1,:),ReceiverError(1,:),Sphere);
GND(1).ECFcoord_error=RL_err(1,:);
GND(2).ECFcoord_error=RL_err(2,:);
GND(3).ECFcoord_error=RL_err(3,:);

%% Input Ranges
% AzimuthRange=0:45:359; %ALWAYS wrt to the first receiver. 
% ElevationRange=15:15:75;
AzimuthRange=0:10:359; %ALWAYS wrt to the first receiver. 
ElevationRange=5:5:90;

%this set of inputs causes an error!
% AzimuthRange=0:2.5:359; ElevationRange=1:1:4;


SatelliteRangeRange=1000e3; %range of satellite range values.


%% Create satellite test case, run sensitivity.

Test=zeros(length(AzimuthRange)*length(ElevationRange),2);
p=0;
for i=1:length(AzimuthRange)
    for j=1:length(ElevationRange)
        p=p+1;
        Test(p,:)=[AzimuthRange(i) ElevationRange(j)];
    end
end

Azimuths=Test(:,1);
Elevations=Test(:,2);
Refx=T(1,1);
Refy=T(1,2);
Refz=T(1,3);
% try
SensitivityTest=cell(p,1);
timeDiffs=zeros(p,3);
    parfor i=1:p
%     for i=1:p
%     for i=1:length(AzimuthRange)
%         for j=1:length(ElevationRange)
            %% Set up problem and get ground truth.
%             Az=AzimuthRange(i);
%             El=ElevationRange(j);
            Az=Azimuths(i);
            El=Elevations(i);
            Rng=SatelliteRangeRange;

            %This is ALWAYS measured from Receiver 1. XY position.
%             GT(i,:)=[zPlane*cos(El)*sin(Az) zPlane*cos(El)*cos(Az)];

            [lat, long, h]=enu2geodetic(Rng*cosd(El)*sind(Az),Rng*cosd(El)*cosd(Az),Rng*sind(El),...
                Refx,Refy,Refz,Sphere);
            SAT=getStruct([lat long h],zeros(1,4),[Refx Refy Refz],zeros(1,4),Sphere);
            
            [TimeDiffs,TimeDiffErr]=timeDiff3toMatrix(GND,SAT);
            timeDiffs(i,:)=[TimeDiffs(1,2), TimeDiffs(1,3), TimeDiffs(2,3)];
            
            [SensitivityLocation, SensitivityTime]=OneAtaTime(GND,SAT,1,1,outputFolder,1,DebugMode,numSamples,Sphere);
            %sensitivityLocation is a 2x1 cell and SensitivityTime a 2x1 cell.
            %The cell entries are Azimuth and Elevation. Inside are mx3 and mx1
            %slopes.
            SensitivityTest{i}={SensitivityLocation, SensitivityTime};

%         end
%     end
    end
% catch ME
%     warning([ME.message ' first instance at ' num2str(ME.stack(1).line)])
%     save([outputFolder '/Error'],ME);
% end
% save([outputFolder '/Data'])
save(['Output' outputFolder])